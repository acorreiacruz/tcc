generator client {
  provider = "prisma-client-js"
  output = env("ORDER_PRISMA_CLIENT")
}

datasource db {
  provider = "postgresql"
  url      = env("ORDER_POSTGRES_URL")
}

model Order {
  orderId String @id @map("id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  userId String @map("user_id") @db.Uuid
  orderDate DateTime @map("order_date")
  fulfillmentMethod String @map("fulfillment_method")
  paymentMethod String @map("payment_method")
  total Float
  status String
  orderItems OrderItem[]
  @@map("order")
}

model Item {
  itemId String @id @map("id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  name String @db.VarChar(150) 
  description String @db.VarChar(300)
  price Float
  orderItems OrderItem[]
  @@map("item")
}

model OrderItem {
  orderId String @db.Uuid @map("order_id")
  itemId String @db.Uuid @map("item_id")
  order Order  @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  item Item @relation(fields: [itemId], references: [itemId], onDelete: Cascade)
  price Float
  quantity Int
  @@id([orderId, itemId])
  @@map("order_item")
}

model OrderOutbox {
  id String @id @db.Uuid @default(uuid())
  createdAt DateTime @default(now()) @map("created_at") 
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") 
  eventId String @db.Uuid @unique @map("event_id")
  eventName String @map("event_name")
  status String
  payload String
  @@map("order_outbox")
}